<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 문서는 mybatis에서 처리할 SQL문을 처리하는 문서입니다... -->
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0/EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
<!-- <mapper>태그의 namespace속성은 Java소스에서 실행할 SQL문을 호출할 때 같이 사용되는 이름이다. -->
<mapper namespace="admin">
    	
	<!-- 관리자 메인 페이지 결재 대기 count 조회 -->
   	<select id="signCount" resultType="int">
   		select count(*) from restaurant where accept is null
   	</select>


<!-- 	<select id="totalCount" parameterType="map" resultType="int">
		select count(*) from ${table} where 1=1
		  
		    <if test="acceptNotNull=='acceptnotnull'">
		      and accept is not null
		    </if>
		    <if test="acceptNull=='acceptnull'">
		      and accept is null
		    </if>
		    <if test="memSt == 'memSt'">
		      and mem_st = 1
		    </if>
		  
	</select>
	 -->
	
   <select id="totalCount" parameterType="map" resultType="int">
      select count(*) from ${table} where 1=1
        
          <if test="acceptNotNull=='acceptnotnull'">
            and accept is not null
          </if>
          <if test="acceptNull=='acceptnull'">
            and accept is null
          </if>
          <if test="memSt == 'memSt'">
            and mem_st = 1
          </if>
        
   </select>
    
    <!--        사업자 승인 페이지 부분       -->
    <!-- 사업자 정보조회(승인대기) -->
	<select id="waitApproval" parameterType="map" resultType="restaurantVo">
	 select A.* from 
	     (select rownum as rnum , B.* from
	        ( select rst_id, rst_name, rst_req, bs_num from restaurant where accept is null) B 
	    <![CDATA[
	          where rownum <= #{end}) A
	       where A.rnum >= #{start}
	     ]]> 
	</select>	
   
   
   
   <!-- 결재관리버튼(승인) -->
   <update id="signupApproval" parameterType="String">
       update restaurant set accept = sysdate where rst_id = #{rst_id}
   </update>
   
   <!-- 결재관리버튼(삭제) -->
   <delete id="signupDelete" parameterType="String">
      delete from restaurant where rst_id = #{rst_id}
   </delete>
   
      <!--                 회원 관리 부분                -->
   <!-- 사업자 정보 조회 (관리자)-->
   <select id="restaurantInfo" parameterType="map" resultType="rstdetailVo">
	  select A.* from 
	     (select rownum as rnum , B.* from
	        ( select rst_id, rst_name, rst_addr, rst_tel, 
	         (select ctg_name from category a where a.ctg_id = b.ctg_id) as rst_menu 
	       from restaurant b where accept is not null) B 
	    <![CDATA[
	          where rownum <= #{end}) A
	       where A.rnum >= #{start}
	     ]]> 
	</select>	
    
   <!-- 메인_사업자 정보 조회 (관리자)-->
   <select id="restaurantInfo2" resultType="rstdetailVo">
	select rownum as rnum , B.* from
	        ( select rst_id, rst_name, rst_addr, rst_tel, 
	         (select ctg_name from category a where a.ctg_id = b.ctg_id) as rst_menu 
	       from restaurant b where accept is not null) B 
   
   </select>	  
   
   <!-- 사업자 상세 조회-->
   <select id="restaurantDetail" resultType="rstdetailVo" parameterType="String">
      select b.*,
         (select ctg_name from category a where a.CTG_ID = b.CTG_ID) as rst_menu
      from RESTAURANT b where RST_ID=#{rst_id}
   </select>
   

   <!-- 멤버 조회 -->
   <select id="memberInfo" parameterType="map" resultType="memberVo">
	    select A.* from 
	     (select rownum as rnum , B.* from
	        ( select * from members) B 
	    <![CDATA[
	          where rownum <= #{end}) A
	       where A.rnum >= #{start}
	     ]]> 
  </select>	
   
   <!-- 멤버 상세조회 -->
   <select id="memberDetail" resultType="memberVo" parameterType="String">
          select * from members where mem_id= #{mem_id} 
    
   </select>  
   
    
   <!-- 멤버 블랙리스트 -->   
   <select id="blackListInfo" parameterType="map" resultType="memberVo">
	    select A.* from 
	     (select rownum as rnum , B.* from
	        ( select mem_id, mem_name, mem_rn, mem_st, mem_lc from members where mem_st=1) B 
	    <![CDATA[
	          where rownum <= #{end}) A
	       where A.rnum >= #{start}
	     ]]> 
  </select>	

   
   <!-- 블랙리스트 해제 버튼(삭제) -->
   <update id="signupBlackListDel" parameterType="String">
      update members set mem_rn=0, mem_st=0,  mem_lc=mem_lc+1  where mem_id=#{mem_id}
   </update>


   <!-- 댓글 신고 전체 -->
   <select id="cmtReportList" resultType="cmtrVo">
		select cmtr_id, cmtr_reason, cmtr_date, cmtreport.mem_id as reporter, cmt.mem_id as defendant, cmt_content
		from cmtreport
		join cmt on cmtreport.cmt_id = cmt.cmt_id
   </select>
   
   <!-- 댓글 신고 해제 -->
   <update id="rnRelease" parameterType="String">
	   	update members set mem_rn = mem_rn-1 where mem_id = #{mem_id}
   </update>
   
   <delete id="rnRelease2" parameterType="int">
	    delete from cmtreport where cmtr_id =#{cmtr_id}
   </delete>
   

    <!-- 리뷰 신고 신고당한 부분만 추출 -->
   <select id="cmtReportDetail" resultType="cmtrVo" parameterType="String">  
	     select cmtr_id, cmtr_reason, cmtr_date, cmtreport.mem_id as reporter, cmt.mem_id as defendant, cmt_content
		 from cmtreport
		 join cmt on cmtreport.cmt_id = cmt.cmt_id
		 where cmt.mem_id = #{mem_id}
   </select>
      
   <!-- 리뷰 신고 해제 -->
   <delete id="rvrRelease" parameterType="int">
	delete from rvreport where rvr_id = #{rvr_id}
   </delete>
   
   

   <!-- 리뷰 신고 리스트 전체-->
   <select id="rvreportList" resultType="rvrVo">
	  select rvr_id, rvr_reason, rvr_date, b.mem_id as reporter, rv_title, a.mem_id as defendant, rv_content
	  from review a
	  join rvreport b on a.rv_id = b.rv_id
   </select>
   
   <!-- 리뷰 신고 신고당한 부분만 추출 -->
   <select id="rvreportDetail" resultType="rvrVo" parameterType="String" >
	  select rvr_id, rvr_reason, rvr_date, b.mem_id as reporter, rv_title, a.mem_id as defendant, rv_content
	  from review a
	  join rvreport b on a.rv_id = b.rv_id
	  where a.mem_id = #{mem_id}
   </select>
   
   
   <!--  공지사항 게시판  부분  -->
   
   
   <!-- 공지사항 전체 조회 -->
   <select id="noticeBoardInfo" parameterType="map" resultType="noticeboardVo">
    select A.* from 
     (select rownum as rnum , B.* from
        (select nb_id, nb_title, nb_date from noticeboard order by nb_id desc) B 
    <![CDATA[
          where rownum <= #{end}) A
       where A.rnum >= #{start}
     ]]> 
  </select>	
  

   <!-- 선택한 공지사항 조회 -->
   <select id="noticeBoardDetail" resultType="noticeboardVo" parameterType="int">
      select * from noticeboard where nb_id = #{nb_id}
   </select>
   
   <!-- 공지사항 입력 -->
   <select id="noticeBoardWrite" parameterType="noticeboardVo">
      insert into noticeboard (nb_id, nb_content, nb_title, nb_date) 
      values (SEQ_NB.nextval, #{nb_content}, #{nb_title}, sysdate)
   </select>
   
   <!-- 공지사항 삭제 -->
   <delete id="noticeboardDelete" parameterType="int">
      delete from noticeboard where nb_id = #{nb_id}
   </delete>
   
   <!-- 공지사항수정 -->
   <update id="noticeboardUpdate" parameterType="noticeboardVo">
      update noticeboard set nb_title = #{nb_title}, nb_content= #{nb_content}, nb_date=sysdate where nb_id= #{nb_id}
   </update>
   

   

</mapper>